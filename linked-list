//Linked list implementation://
#include<iostream>
using namespace std;
class Node
{
 public:
   int data;
   Node* next;
   Node()
    {
    data=0;
    next=NULL;
    }
   Node(int data)
   {
    this->data=data;
    this->next=NULL;
    }
};
class Linkedlist
{
 Node* head;
 public:
   Linkedlist()
   {
   head=NULL;
   }
   void insertNode(int);
   void printlist();
   void deleteNode(int);
 };
void Linkedlist::deleteNode(int x)
{
 Node *temp1=head,*temp2=NULL;
 int len=0;
 if(head==NULL)
 {
  cout<<"list is empty"<<endl;
  return;
  }
  while(temp1!=NULL)
  {
  temp1=temp1->next;
  len++;
  }
  if(len<x)
  {
   cout<<"Index out of range"<<endl;
   return;
   }
   temp1=head;
   if(x==1)
   {
    head=head->next;
    delete temp1;
    return;
    }
    while(x-- >1)
    {
    temp2=temp1;
    temp1=temp1->next;
    }
    temp2->next=temp1->next;
    delete temp1;
    }
void Linkedlist::insertNode(int data)
{
 Node* newNode= new Node(data);
 if(head==NULL)
 {
  head=newNode;
  return;
  }
 Node* temp=head;
 while(temp->next!=NULL)
 {
  temp=temp->next;
  }
  temp->next=newNode;
  }
void Linkedlist::printlist()
{
Node* temp=head;
 if(head==NULL)
 {
  cout<<"List is empty"<<endl;
  return;
  }
 while(temp!=NULL)
 {
  cout<<temp->data<<" ";
  temp=temp->next;
  }
  }
  int main()
  {
   Linkedlist list;
   list.insertNode(5);
   list.insertNode(6);
   list.insertNode(7);
   list.insertNode(8);
   cout<<"Elements of the list are:";
   list.printlist();
   cout<<endl;
   list.deleteNode(7);
   cout<<"Elements of the list after deletion:";
   list.printlist();
   cout<<endl;
   return 0;
   }
